LIVE 2 - Semana 3
    GIT - GITHUB
        **Para aprender más de Git - ProGit de la pagina de Git**
        Comandos para saber el estado, ubicacion, nuestros commits, mandar commits, etc:
            git status:
                Para saber si estamos en un repo

            git init: 
                Creamos un repo de git
            *Debemos agregar los commits seguido para tener un seguimiento de las versiones*
            git remote add:
                Agregamos una URL de un repo de alguna plataforma asi "origin (URL)"
            git remote -v:
                Donde esta el repo

            git push origin master  
                push (Push sirve para "Empujar" los cambios hacia nuestro repo)
                origin (Cual es el origen de nuestro repo) 
                master (Branch principal)
            Git pull            
                Tanto el repo de Git como el de Github tienen que esta actulizado con lo cambios que hagamos
                Para ello cuando hacemos cambios en Github podemos traerlos a nostros con:
                Git pull "origin master"

            *Hay que entender como usar lo comandos de Git, no usar por usar"

            ¡¡¡¡¡¡Git necesario para conocer nuestros pasos!!!!!!

            *Avanzado* git push origin master --force: Mandamos los cambios de nuestro repo local sin importar los que haya en el global
    Creacion de un Proyecto en JS
        1. Para cualquier proyecto de Js - Versionarlo con Git
            1.1 Agregar Repo remoto de GitHub - Agregamos la URL
            CONOCER GIT - CONOCER LA TEORIA DETRAS DE LOS COMANDOS
            1.2 Commits para conocer nuestro proceso
        2. Ejecutar npm init -npm init: nos crea el package.json
        3. Provicionar ambiente creando: 
            Estructura del Proyecto: Permite una estructura simple 
                Test
                    Services
                    Views
                    Models
                        User.test.js    
                App
                    Services
                    Views
                    Models
                    
                        User.js
        4. Agregar Jest como dependencia para nuestros Test
            Jest es una dependencia (Aquel proyecto que nos va ayudar pero no es de nuestro proyecto)
            4.1 Comando para instalar Jest:
                    npm install --save-dev jest
            4.2 Cambiar Test por el siguiente:
                    node --experimental-vm-modules ./node_modules/jest/bin/jest
                Con este logramos hacer que Jest funcione con nuestros Tests
        5. Creamos nuestra prueba y la hacemos fallar
            NUNCA CONFIAR DE UNA PRUEBA QUE NO HA FALLADO
            LAS PRUEBAS SON NECEASARIAS PARA CUALQUIER PROYECTO!!
        6. Creamos .gitignore para no versionar NodeModels:
            Gitignore debe llevar:
                **/node_modules
                **//.DS_Store
            Contiene dependencias de tu proyecto pero no son parte de el, por ello no debemos versionarlo
                
        7. Creamos el contenido requerido para el proyecto
        8. Exportar e importar el script para tener un orden en nuestro proyecto
    JavaScript
        Un codigo de Js no debe tener mas de 50 o más lineas para que sea muy sencillo
        Importar
            Para importar podemos hacer lo siguiente:
            const Objeto = require(./../Carpeta_del_archivo)
        Clases
            Asi creamo una clase con sus modulos 
            Class Object{
                *Module*constructor(Modulo1,Modulo2,Modulo3)
            }
        new Date()
            Nos da la hora del sistema opertativo y lo podemos 
            utilizar como funcion para agregarlo a un objeto 
            cuando queremos saber fechas y horas exactas
        Getters:
            Ayudan a accesar informacion especifica de un objeto 
                get getObjeto() {
                    return this.username
                            "this." hace referencia a las propiedades de dicho objeto    
                    }
        Setters:
            Actualizan la informacion de un objeto:
                set setNuevoObject (NewObject){
                    this.Object = NewObject 
                        }
                Objeto.setNuevoObject = "New Value"
    TDD Tests
        1. Sirve para obtener lo que queremos de nuestro codigo
        2. SIEMPRE tener que correr la prueba y hacerla fallar
        3. Exportar e importar el script para tener un orden en nuestro proyecto 
        4. Pruebas para poder verificar que nuestro codigo funciona, sirve para mantener nuestro proyecto

LIVE 3 - Week 3
    Servers en Node Js
        Express:
            Definicion:
                Dependencia o Framework de Java Script que nos
                ayuda a crear sevidores, a pesar de que Js tiene
                su forma de crear servidors, con Express es mas rapido 
                aplicaciones de servidor

            Usar Express en JavaScript:
                1. Para agregar Express:
                    npm install express --save
                        Esto actulizara el package.json, ahora aparecera en nuestras dependencias
                2. Mandamos a llamar la dependencia:
                    const express = require('express')
                3. La metemos a un objeto:
                    const app = express()
                4. Creamos un puerto:
                    const port = 3000  
                5. Creamos nuestra URL:
                    app.get('/'(req, res (Parametros que son necesarios: Request(Alguien mandara un mensaje) y respond(Alguien respondera) ))) (Podemos colocar la URL que deseemos, al colocar '/' tomara como URL "Localhost:300"
                             Un ejemplo seria si alguien entra a nuestro servidor, podemos mandarle una respuesta:
                            res.send("Hola Viajero")
                6. Incializar nuestro servidor:
                    app.listen(port,() =>{    (Indicamos el puerto que queremos que abra)    
                        console.log("Server is running)
                    }
                7. ¡ Server Creado ! *Primer aplicacion de BackEnd*       
